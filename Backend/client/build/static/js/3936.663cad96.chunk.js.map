{"version":3,"file":"static/js/3936.663cad96.chunk.js","mappings":"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","sources":["modules/Auth/User/NewPassword.tsx","modules/Auth/User/components/AuthWrapper.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { useChangePassword } from \"../../../hooks/auth\";\r\nimport nirsal from \"../../../assets/download.jpeg\";\r\nimport { useIsMutating } from \"@tanstack/react-query\";\r\nimport { AuthWrapper } from \"./components/AuthWrapper\";\r\nimport { Link, useNavigate, useParams } from \"react-router-dom\";\r\n\r\ninterface FormData {\r\n  // currentPassword: string;\r\n  password: string;\r\n}\r\nconst NewPassword = () => {\r\n  const { token } = useParams();\r\n  const { mutate } = useChangePassword(token);\r\n\r\n  const isLoading = useIsMutating();\r\n  const navigate = useNavigate();\r\n\r\n  const [form] = Form.useForm();\r\n\r\n  const [formData, setFormData] = useState<FormData>({\r\n    password: \"\",\r\n    // newPassword: \"\",\r\n  });\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleValidation = async () => {\r\n    try {\r\n      await form.validateFields();\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const isValid = await handleValidation();\r\n    if (isValid) {\r\n      await form.submit();\r\n      navigate(\"/login\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AuthWrapper>\r\n        <div className=\"flex items-center justify-center w-[450px]\">\r\n          <Form\r\n            name=\"forgot-password\"\r\n            initialValues={{ remember: true }}\r\n            onFinish={(values) => {\r\n              mutate(values, {\r\n                onSuccess: () => {\r\n                  form.resetFields();\r\n                },\r\n              });\r\n            }}\r\n            className=\"bg-white p-10 sm:shadow-md w-full\"\r\n            form={form}\r\n            variant=\"borderless\"\r\n            layout=\"vertical\"\r\n          >\r\n            <div className=\"\">\r\n              <Link to=\"/\">\r\n                <img className=\"h-12 w-17\" src={nirsal} alt=\"ChitChat Logo\" />\r\n              </Link>{\" \"}\r\n            </div>\r\n\r\n            <div className=\"text-2xl mt-8 mb-1 font-bold text-black\">\r\n              New Password{\" \"}\r\n            </div>\r\n            <div className=\"text-sm mb-5 font-medium text-black\">\r\n              Kindly use a combination unique to you\r\n            </div>\r\n\r\n            {/* <Form.Item\r\n              name=\"currentPassword\"\r\n              label=\"Password\"\r\n              rules={[{ required: true, message: \"Please input a password!\" }]}\r\n            >\r\n              <Input.Password\r\n                className=\"border-gray-300 rounded-none\"\r\n                name=\"currentPassword\"\r\n                onChange={handleInputChange}\r\n                style={{ backgroundColor: \"#EBE9E9\", marginTop: \"-2rem\" }}\r\n              />\r\n            </Form.Item> */}\r\n\r\n            <Form.Item\r\n              name=\"password\"\r\n              label=\"New Password\"\r\n              rules={[\r\n                { required: true, message: \"Please input a new password!\" },\r\n              ]}\r\n            >\r\n              <Input.Password\r\n                className=\"border-gray-300 rounded-none\"\r\n                name=\"password\"\r\n                onChange={handleInputChange}\r\n                style={{ backgroundColor: \"#EBE9E9\", marginTop: \"-2rem\" }}\r\n              />\r\n            </Form.Item>\r\n\r\n            <div className=\"flex justify-end items-center mt-4\">\r\n              <div className=\"flex flex-row mb-8\"></div>\r\n\r\n              <Form.Item>\r\n                <Button\r\n                  onClick={handleSubmit}\r\n                  name=\"email\"\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  className=\"w-40 mb-10 h-10 rounded bg-blue-500 hover:text-black hover:bg-white text-sm\"\r\n                  style={{\r\n                    background:\r\n                      \"linear-gradient(89.46deg, #39462D 13.05%, #658127 107.23%)\",\r\n                    color: \"white\",\r\n                  }}\r\n                  loading={isLoading > 0}\r\n                >\r\n                  Submit{\" \"}\r\n                </Button>\r\n              </Form.Item>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </AuthWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default NewPassword;\r\n","import React, { ReactNode, useEffect, useState } from \"react\";\r\nimport bg1 from \"../../../../assets/country-side.jpg\";\r\nimport bg2 from \"../../../../assets/harvesting-wheat.jpg\";\r\nimport bg3 from \"../../../../assets/sunset-rural-farm.jpg\";\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n};\r\n\r\nexport const AuthWrapper = ({ children }: Props) => {\r\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n  const images = [bg1, bg2, bg3];\r\n  const [isSmallScreen, setIsSmallScreen] = useState(window.innerWidth < 640);\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setCurrentImageIndex((currentImageIndex + 1) % images.length);\r\n    }, 30000);\r\n\r\n    return () => clearInterval(intervalId);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentImageIndex]);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsSmallScreen(window.innerWidth < 640);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"min-h-screen flex items-center justify-center bg-cover bg-center\"\r\n      style={\r\n        isSmallScreen\r\n          ? {}\r\n          : { backgroundImage: `url(${images[currentImageIndex]})` }\r\n      }\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["NewPassword","token","useParams","mutate","useChangePassword","isLoading","useIsMutating","navigate","useNavigate","form","Form","useForm","formData","setFormData","useState","password","_jsx","_Fragment","children","AuthWrapper","className","_jsxs","name","initialValues","remember","onFinish","values","onSuccess","resetFields","variant","layout","Link","to","src","nirsal","alt","Item","label","rules","required","message","Input","Password","onChange","e","value","target","style","backgroundColor","marginTop","Button","onClick","async","preventDefault","validateFields","error","handleValidation","submit","type","htmlType","background","color","loading","_ref","currentImageIndex","setCurrentImageIndex","images","bg1","bg2","bg3","isSmallScreen","setIsSmallScreen","window","innerWidth","useEffect","intervalId","setInterval","length","clearInterval","handleResize","addEventListener","removeEventListener","backgroundImage","concat"],"sourceRoot":""}