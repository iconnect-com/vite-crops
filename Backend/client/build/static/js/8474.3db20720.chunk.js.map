{"version":3,"file":"static/js/8474.3db20720.chunk.js","mappings":"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","sources":["modules/Admin/Reporting/components/ReportingPage.tsx","modules/Admin/Reporting/index.tsx"],"sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useContext, useEffect, useMemo, useState } from \"react\";\r\nimport { Button, Col, Table, Select, DatePicker, Dropdown } from \"antd\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { LineChart } from \"../../../../components\";\r\nimport { DataContext } from \"../../../../context/DataContext\";\r\nimport type { TableColumnsType } from \"antd\";\r\nimport { Dayjs } from \"dayjs\";\r\nimport { jsPDF } from \"jspdf\";\r\nimport html2canvas from \"html2canvas\";\r\nimport { useGetConfiguration } from \"../../hooks\";\r\nimport { errorAlert } from \"../../../../utils\";\r\nimport { saveAs } from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport type { MenuProps } from \"antd\";\r\n\r\ninterface ICommodity {\r\n  _id: string;\r\n  name: string;\r\n  previous_price: number;\r\n  current_price: number;\r\n  data: any[];\r\n  effective_date: any;\r\n  effective_time: string;\r\n}\r\n\r\nconst ReportingPage: React.FC = () => {\r\n  const { data: MarketPrices } = useGetConfiguration();\r\n  const { publicCommodities } = useContext(DataContext);\r\n\r\n  const mappedData = MarketPrices?.map((item: any, index: any) => ({\r\n    ...item,\r\n    index,\r\n  }));\r\n\r\n  const [activeItem, setActiveItem] = useState(0);\r\n  const [showCalendar, setShowCalendar] = useState(false);\r\n  const [filterData, setFilterData] = useState<ICommodity[]>([]);\r\n  const [exportType, setExportType] = useState<\"pdf\" | \"xlsx\">(\"pdf\");\r\n  const [shouldExport, setShouldExport] = useState(false);\r\n  const [yearFilteredData, setYearFilteredData] = useState<ICommodity[]>([]);\r\n  const [commodityDatas, setCommodityDatas] = useState<ICommodity[]>([]);\r\n  const [commodityDetails, setCommodityDetails] = useState<\r\n    ICommodity | undefined\r\n  >(undefined);\r\n\r\n  const [commodityData, setCommodityData] = useState<ICommodity | undefined>(\r\n    undefined\r\n  );\r\n  const [commodityName, setCommodityName] = useState<string | undefined>(\r\n    undefined\r\n  );\r\n\r\n  const selectedCommodity = publicCommodities?.[activeItem];\r\n\r\n  const CheckName = () => {\r\n    const commodity = publicCommodities?.find(\r\n      (commodity) => commodity._id === String(activeItem)\r\n    );\r\n    return commodity?.name;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (activeItem) {\r\n      setCommodityName(CheckName());\r\n    }\r\n  }, [activeItem]);\r\n\r\n  const monthNames = [\r\n    \"January\",\r\n    \"February\",\r\n    \"March\",\r\n    \"April\",\r\n    \"May\",\r\n    \"June\",\r\n    \"July\",\r\n    \"August\",\r\n    \"September\",\r\n    \"October\",\r\n    \"November\",\r\n    \"December\",\r\n  ];\r\n\r\n  const years = Array.from(\r\n    new Set(\r\n      mappedData?.map((item: { effective_date: string | number | Date }) =>\r\n        new Date(item.effective_date).getFullYear()\r\n      )\r\n    )\r\n  ) as number[];\r\n\r\n  const months = Array.from(\r\n    new Set(\r\n      mappedData?.map(\r\n        (item: { effective_date: string | number | Date }) =>\r\n          monthNames[new Date(item.effective_date).getMonth()]\r\n      )\r\n    )\r\n  ) as string[];\r\n\r\n  const handleYearChange = (value: any) => {\r\n    const CommodityData = mappedData?.filter(\r\n      (item: any) => item.commodity._id === activeItem\r\n    );\r\n    setCommodityDatas(CommodityData);\r\n\r\n    if (value) {\r\n      const filteredData = CommodityData?.filter(\r\n        (item: any) => new Date(item.effective_date).getFullYear() === value\r\n      );\r\n      setYearFilteredData(filteredData || []);\r\n    } else {\r\n      setFilterData(CommodityData || []);\r\n    }\r\n  };\r\n\r\n  const handleMonthChange = (value: any) => {\r\n    const CommodityData = yearFilteredData;\r\n\r\n    if (value) {\r\n      const monthNumber = monthNames.indexOf(value);\r\n      const filteredData = CommodityData?.filter(\r\n        (item: any) => new Date(item.effective_date).getMonth() === monthNumber\r\n      );\r\n      setFilterData(filteredData || []);\r\n    } else {\r\n      setFilterData(CommodityData || []);\r\n    }\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleGoBack = () => {\r\n    navigate(-1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (shouldExport) {\r\n      handleExport();\r\n      setShouldExport(false);\r\n    }\r\n  }, [shouldExport]);\r\n\r\n  const handleExport = async () => {\r\n    if (!activeItem) {\r\n      return;\r\n    }\r\n    if (exportType === \"pdf\") {\r\n      const doc = new jsPDF(\"p\", \"mm\", \"a4\");\r\n      const pageWidth = doc.internal.pageSize.getWidth();\r\n      const pageHeight = doc.internal.pageSize.getHeight();\r\n\r\n      const captureElement = async (id: string, x: number, y: number) => {\r\n        const element = document.getElementById(id);\r\n        if (element) {\r\n          const canvas = await html2canvas(element);\r\n          const imgData = canvas.toDataURL(\"image/png\");\r\n\r\n          const widthRatio = pageWidth / canvas.width;\r\n          const heightRatio = pageHeight / canvas.height;\r\n          const ratio = Math.min(widthRatio, heightRatio);\r\n\r\n          const imgWidth = canvas.width * ratio - 20;\r\n          const imgHeight = canvas.height * ratio - 20;\r\n\r\n          // Add header\r\n          doc.setFontSize(16);\r\n          doc.text(\"Commodity Report\", pageWidth / 2, 20, { align: \"center\" });\r\n          doc.setFontSize(12);\r\n\r\n          doc.text(\r\n            `Commodity Name: ${commodityName}`,\r\n            10, // Adjust x-coordinate to align text to the left\r\n            30,\r\n            {\r\n              align: \"left\",\r\n            }\r\n          );\r\n\r\n          // doc.text(\r\n          //   `Commodity Previous Price: ${selectedCommodity?.previous_price}`,\r\n          //   10, // Adjust x-coordinate to align text to the left\r\n          //   35, // Adjust y-coordinate to place it below the commodity name\r\n          //   {\r\n          //     align: \"left\",\r\n          //   }\r\n          // );\r\n\r\n          // doc.text(\r\n          //   `Commodity New Price: ${selectedCommodity?.current_price}`,\r\n          //   10, // Adjust x-coordinate to align text to the left\r\n          //   40, // Adjust y-coordinate to place it below the commodity name\r\n          //   {\r\n          //     align: \"left\",\r\n          //   }\r\n          // );\r\n\r\n          // doc.text(`Expert Analysis: ${selectedCommodity?.analysis}`, 10, 50, {\r\n          //   align: \"left\",\r\n          // });\r\n\r\n          // Adjust y-coordinate for the image based on the height of the header\r\n          const headerHeight = 40;\r\n          const imageY = y + headerHeight;\r\n\r\n          doc.addImage(imgData, \"PNG\", x, imageY, imgWidth, imgHeight);\r\n\r\n          return imgHeight;\r\n        }\r\n      };\r\n\r\n      try {\r\n        // Add a delay before capturing the elements\r\n        await new Promise((resolve) => setTimeout(resolve, 1000));\r\n        const chartHeight = await captureElement(\"line-chart\", 7, 30);\r\n        if (chartHeight) {\r\n          await captureElement(\"table\", 10, chartHeight + 20); // Place the table 20 units below the graph\r\n        }\r\n        doc.save(\"download.pdf\");\r\n      } catch (error) {\r\n        errorAlert(\"Error while exporting\");\r\n      }\r\n    } else if (exportType === \"xlsx\") {\r\n      try {\r\n        const commodityData = mappedData?.filter(\r\n          (item: any) => item.commodity._id === activeItem\r\n        );\r\n\r\n        const worksheet = XLSX.utils.aoa_to_sheet(\r\n          commodityData.map(\r\n            (item: {\r\n              number: number;\r\n              commodity: { name: string };\r\n              new_price: number;\r\n              effective_date: string;\r\n            }) => [\r\n              item.number,\r\n              item.commodity.name,\r\n              item.new_price,\r\n              item.effective_date,\r\n            ]\r\n          )\r\n        );\r\n\r\n        const workbook = XLSX.utils.book_new();\r\n        XLSX.utils.book_append_sheet(workbook, worksheet, \"CommodityData\");\r\n\r\n        const excelBuffer = XLSX.write(workbook, {\r\n          bookType: \"xlsx\",\r\n          type: \"buffer\",\r\n        });\r\n        const data = new Blob([excelBuffer], {\r\n          type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\",\r\n        });\r\n        saveAs(data, `commodity_${activeItem}_data.xlsx`);\r\n      } catch (error) {\r\n        errorAlert(\"Error while exporting\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleDateChange = (\r\n    date: Dayjs | null,\r\n    dateString: string | string[]\r\n  ) => {\r\n    const CommodityData = mappedData?.filter(\r\n      (item: any) => item.commodity._id === activeItem\r\n    );\r\n\r\n    if (date) {\r\n      const filteredData = CommodityData?.filter(\r\n        (item: ICommodity) => item.effective_date === dateString\r\n      );\r\n\r\n      setFilterData(filteredData || []);\r\n    } else {\r\n      setFilterData(CommodityData || []);\r\n    }\r\n    setShowCalendar(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleDateChange(null, \"\");\r\n  }, [activeItem]);\r\n\r\n  const handleReset = () => {\r\n    setFilterData(commodityDatas || []);\r\n    setYearFilteredData([]);\r\n    setFilterData([]);\r\n    setCommodityName(\"\");\r\n  };\r\n\r\n  const menuItems: MenuProps[\"items\"] = [\r\n    {\r\n      key: \"pdf\",\r\n      label: \"Export as PDF\",\r\n    },\r\n    {\r\n      key: \"xlsx\",\r\n      label: \"Export as XLSX\",\r\n    },\r\n  ];\r\n\r\n  const columns: TableColumnsType<ICommodity> = [\r\n    {\r\n      title: \"S/N\",\r\n      dataIndex: \"number\",\r\n      width: 80,\r\n      key: \"number\",\r\n      align: \"center\",\r\n      render: (text, record, index) => index + 1,\r\n    },\r\n\r\n    {\r\n      title: \"Commodity\",\r\n      dataIndex: \"commodity\",\r\n      align: \"left\",\r\n      key: \"name\",\r\n      width: 150,\r\n      render: (text) => (\r\n        <div style={{ height: \"40px\", display: \"flex\", alignItems: \"center\" }}>\r\n          {text?.name || \"\"}\r\n        </div>\r\n      ),\r\n    },\r\n\r\n    {\r\n      title: \"Price\",\r\n      dataIndex: \"new_price\",\r\n      align: \"left\",\r\n      key: \"current_price\",\r\n      width: 150,\r\n      render: (text) => (\r\n        <div style={{ height: \"40px\", display: \"flex\", alignItems: \"center\" }}>\r\n          {text?.toLocaleString()}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Date\",\r\n      dataIndex: \"effective_date\",\r\n      align: \"left\",\r\n      width: 150,\r\n      key: \"effective_date\",\r\n      render: (text) => (\r\n        <div style={{ height: \"40px\", display: \"flex\", alignItems: \"center\" }}>\r\n          {text}\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      title: \"Time\",\r\n      dataIndex: \"effective_time\",\r\n      align: \"left\",\r\n      width: 150,\r\n      key: \"effective_date\",\r\n      render: (text) => (\r\n        <div style={{ height: \"40px\", display: \"flex\", alignItems: \"center\" }}>\r\n          {text}\r\n        </div>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  const lineChartData = useMemo(() => {\r\n    if (!commodityName) return [];\r\n\r\n    // Initialize an array to store the count of commodities for each month\r\n    const countsByMonth = Array(12).fill(0);\r\n\r\n    // Filter data based on the selected commodity\r\n    const filteredData = mappedData?.filter(\r\n      (item: any) => item.commodity._id === activeItem\r\n    );\r\n\r\n    if (!filteredData) return [];\r\n\r\n    // Count the number of commodities for each month\r\n    filteredData.forEach((item: any) => {\r\n      const month = new Date(item.effective_date).getMonth();\r\n      countsByMonth[month]++;\r\n    });\r\n\r\n    // Prepare series data\r\n    const seriesData = [\r\n      {\r\n        name: commodityName,\r\n        data: countsByMonth,\r\n      },\r\n    ];\r\n\r\n    return seriesData;\r\n  }, [activeItem, commodityName, mappedData, monthNames]);\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        onClick={handleGoBack}\r\n        type=\"text\"\r\n        className=\"w-30 h-10 mb-6\"\r\n        style={{\r\n          background: \"#65812729\",\r\n          color: \"black\",\r\n          borderRadius: \"50px\",\r\n          boxShadow: \"none\",\r\n        }}\r\n      >\r\n        Back{\" \"}\r\n      </Button>\r\n\r\n      <div className=\"flex flex-col gap-4\">\r\n        <div className=\"flex flex-col sm:flex-row items-end w-[600px] sm:gap-8 mt-8\">\r\n          {/* Div to select a commodity */}\r\n\r\n          <div className=\"flex w-[600px] sm:mt-8\">\r\n            <Select\r\n              className=\"w-[100px]\"\r\n              onChange={(value) => setActiveItem(value)}\r\n              placeholder=\"Commodity\"\r\n              style={{\r\n                backgroundColor: \"#EBE9E9\",\r\n                borderRadius: 0,\r\n                minWidth: \"200px\",\r\n              }}\r\n            >\r\n              {publicCommodities?.map((commodity, index) => (\r\n                <Select.Option key={commodity._id} value={commodity._id}>\r\n                  {commodity?.name}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n\r\n          {/* <div className=\"flex w-[600px] mt-4 sm:mt-8\">\r\n            <DatePicker className=\"\" onChange={handleDateChange} />\r\n          </div> */}\r\n\r\n          {/* Div for selecting a year */}\r\n          <div className=\"flex w-[600px] mt-4 sm:mt-8\">\r\n            <Select\r\n              className=\"w-[100px]\"\r\n              onChange={handleYearChange}\r\n              placeholder=\"Year\"\r\n              style={{\r\n                backgroundColor: \"#EBE9E9\",\r\n                borderRadius: 0,\r\n                minWidth: \"200px\",\r\n              }}\r\n            >\r\n              {years.map((year) => (\r\n                <Select.Option key={year} value={year}>\r\n                  {year}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n\r\n          {/* Div for selecting a month */}\r\n          <div className=\"flex w-[600px] mt-4 sm:mt-8\">\r\n            <Select\r\n              className=\"w-[100px]\"\r\n              onChange={handleMonthChange}\r\n              placeholder=\"Month\"\r\n              style={{\r\n                backgroundColor: \"#EBE9E9\",\r\n                borderRadius: 0,\r\n                minWidth: \"200px\",\r\n              }}\r\n            >\r\n              {months.map((month) => (\r\n                <Select.Option key={month} value={month}>\r\n                  {month}\r\n                </Select.Option>\r\n              ))}\r\n            </Select>{\" \"}\r\n          </div>\r\n\r\n          {/* Div for the Export */}\r\n          <div className=\"flex w-[600px] mt-4 sm:mt-8\">\r\n            <Dropdown\r\n              menu={{\r\n                items: menuItems,\r\n                onClick: ({ key }) => {\r\n                  setExportType(key as \"pdf\" | \"xlsx\");\r\n                  setShouldExport(true);\r\n                },\r\n              }}\r\n              trigger={[\"click\"]}\r\n            >\r\n              <Button style={{ fontSize: \"1rem\" }}>Export</Button>\r\n            </Dropdown>\r\n          </div>\r\n\r\n          {/* Div for the resseting fields */}\r\n          <div className=\"flex w-[600px] mt-4 sm:mt-8\">\r\n            <Button onClick={handleReset}>Reset</Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Div to render data */}\r\n\r\n        <div className=\"p-10 bg-white w-full flex items-center justify-center\">\r\n          <Col xs={24} sm={24} md={24} lg={24}>\r\n            {activeItem ? (\r\n              <>\r\n                <div\r\n                  style={{ margin: 5 }}\r\n                  className=\"sm:px-20 bg-white w-full flex items-center justify-center\"\r\n                >\r\n                  <Col xs={24} sm={24} md={24} lg={24}>\r\n                    <div id=\"line-chart\">\r\n                      <LineChart data={lineChartData} />\r\n                    </div>\r\n\r\n                    <div id=\"table\" className=\"mt-10\">\r\n                      <Table\r\n                        columns={columns}\r\n                        rowKey=\"_id\"\r\n                        dataSource={filterData}\r\n                        size=\"middle\"\r\n                        // pagination={{\r\n                        //   pageSizeOptions: [\"5\", \"10\", \"15\"],\r\n                        //   showSizeChanger: false,\r\n                        // }}\r\n                      />\r\n                    </div>\r\n                  </Col>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <Col xs={24} sm={24} md={24} lg={24}>\r\n                <div className=\"p-48 bg-white w-full flex items-center justify-center\">\r\n                  <p>Select a Commodity</p>\r\n                </div>\r\n              </Col>\r\n            )}\r\n          </Col>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ReportingPage;\r\n","import React from \"react\";\r\nimport AdminLayout from \"../../../layout/Admins\";\r\nimport ReportingPage from \"./components/ReportingPage\";\r\n\r\nconst Reporting = () => {\r\n  return (\r\n    <AdminLayout pageTitle=\"Reporting\">\r\n      <ReportingPage />\r\n    </AdminLayout>\r\n  );\r\n};\r\n\r\nexport default Reporting;\r\n"],"names":["ReportingPage","data","MarketPrices","useGetConfiguration","publicCommodities","useContext","DataContext","mappedData","map","item","index","activeItem","setActiveItem","useState","showCalendar","setShowCalendar","filterData","setFilterData","exportType","setExportType","shouldExport","setShouldExport","yearFilteredData","setYearFilteredData","commodityDatas","setCommodityDatas","commodityDetails","setCommodityDetails","undefined","commodityData","setCommodityData","commodityName","setCommodityName","useEffect","CheckName","commodity","find","_id","String","name","monthNames","years","Array","from","Set","Date","effective_date","getFullYear","months","getMonth","navigate","useNavigate","handleExport","async","doc","jsPDF","pageWidth","internal","pageSize","getWidth","pageHeight","getHeight","captureElement","id","x","y","element","document","getElementById","canvas","html2canvas","imgData","toDataURL","widthRatio","width","heightRatio","height","ratio","Math","min","imgWidth","imgHeight","setFontSize","text","align","concat","imageY","addImage","Promise","resolve","setTimeout","chartHeight","save","error","errorAlert","filter","worksheet","XLSX","aoa_to_sheet","number","new_price","workbook","book_new","book_append_sheet","excelBuffer","bookType","type","Blob","saveAs","handleDateChange","date","dateString","CommodityData","filteredData","columns","title","dataIndex","key","render","record","_jsx","style","display","alignItems","children","toLocaleString","lineChartData","useMemo","countsByMonth","fill","forEach","month","_jsxs","Button","onClick","handleGoBack","className","background","color","borderRadius","boxShadow","Select","onChange","value","placeholder","backgroundColor","minWidth","Option","year","monthNumber","indexOf","Dropdown","menu","items","label","_ref","trigger","fontSize","handleReset","Col","xs","sm","md","lg","_Fragment","margin","LineChart","Table","rowKey","dataSource","size","Reporting","AdminLayout","pageTitle"],"sourceRoot":""}