{"version":3,"file":"static/js/1157.692a61ce.chunk.js","mappings":"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","sources":["modules/Auth/User/ResetPassword.tsx","modules/Auth/User/components/AuthWrapper.tsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport { useForgotPassword } from \"../../../hooks/auth\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport nirsal from \"../../../assets/download.jpeg\";\r\nimport googleIcon from \"../../../assets/logo_google.png\";\r\nimport { useIsMutating } from \"@tanstack/react-query\";\r\nimport { AuthWrapper } from \"./components/AuthWrapper\";\r\n// import { GoogleLogin } from 'react-google-login';\r\n\r\ninterface FormData {\r\n  email: string;\r\n}\r\nconst ResetPassword = () => {\r\n  const { mutate } = useForgotPassword();\r\n  const isLoading = useIsMutating();\r\n  const [form] = Form.useForm();\r\n  const navigate = useNavigate();\r\n\r\n  const [formData, setFormData] = useState<FormData>({\r\n    email: \"\",\r\n  });\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const { name, value } = e.target;\r\n    setFormData({ ...formData, [name]: value });\r\n  };\r\n\r\n  const handleValidation = async () => {\r\n    try {\r\n      await form.validateFields();\r\n      return true;\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    const isValid = await handleValidation();\r\n    if (isValid) {\r\n      form.submit();\r\n      navigate(\"/\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AuthWrapper>\r\n        <div className=\"flex items-center justify-center w-[400px]\">\r\n          <Form\r\n            name=\"reset-password\"\r\n            onFinish={(values) => {\r\n              mutate(values, {\r\n                onSuccess: () => {\r\n                  form.resetFields();\r\n                },\r\n              });\r\n            }}\r\n            className=\"bg-white p-7 sm:shadow-md w-full\"\r\n            form={form}\r\n            variant=\"borderless\"\r\n            layout=\"vertical\"\r\n          >\r\n            <div className=\"\">\r\n              <Link to=\"/\">\r\n                <img className=\"h-12 w-17\" src={nirsal} alt=\"ChitChat Logo\" />\r\n              </Link>{\" \"}\r\n            </div>\r\n\r\n            <div className=\"text-2xl mt-8 mb-1 font-bold text-black\">\r\n              Reset Password{\" \"}\r\n            </div>\r\n            <div className=\"text-sm mb-5 font-medium text-black\">\r\n              Kindly input your email, let's get you back on track\r\n            </div>\r\n\r\n            <Form.Item\r\n              name=\"email\"\r\n              label=\"Email\"\r\n              rules={[{ required: true, message: \"Please input your email!\" }]}\r\n            >\r\n              <Input\r\n                className=\"border-gray-300 rounded-none\"\r\n                name=\"email\"\r\n                onChange={handleInputChange}\r\n                style={{ backgroundColor: \"#EBE9E9\", marginTop: \"-2rem\" }}\r\n              />\r\n            </Form.Item>\r\n\r\n            <div className=\"flex justify-end items-center mt-4\">\r\n\r\n              <Form.Item>\r\n                <Button\r\n                  onClick={handleSubmit}\r\n                  name=\"email\"\r\n                  type=\"primary\"\r\n                  htmlType=\"submit\"\r\n                  className=\"w-40 mb-10 h-10 rounded bg-blue-500 hover:text-black hover:bg-white text-sm\"\r\n                  style={{\r\n                    background:\r\n                      \"linear-gradient(89.46deg, #39462D 13.05%, #658127 107.23%)\",\r\n                    color: \"white\",\r\n                  }}\r\n                  loading={isLoading > 0}\r\n                >\r\n                  Submit{\" \"}\r\n                </Button>\r\n              </Form.Item>\r\n            </div>\r\n          </Form>\r\n        </div>\r\n      </AuthWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n","import React, { ReactNode, useEffect, useState } from \"react\";\r\nimport bg1 from \"../../../../assets/country-side.jpg\";\r\nimport bg2 from \"../../../../assets/harvesting-wheat.jpg\";\r\nimport bg3 from \"../../../../assets/sunset-rural-farm.jpg\";\r\n\r\ntype Props = {\r\n  children: ReactNode;\r\n};\r\n\r\nexport const AuthWrapper = ({ children }: Props) => {\r\n  const [currentImageIndex, setCurrentImageIndex] = useState(0);\r\n  const images = [bg1, bg2, bg3];\r\n  const [isSmallScreen, setIsSmallScreen] = useState(window.innerWidth < 640);\r\n\r\n  useEffect(() => {\r\n    const intervalId = setInterval(() => {\r\n      setCurrentImageIndex((currentImageIndex + 1) % images.length);\r\n    }, 30000);\r\n\r\n    return () => clearInterval(intervalId);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [currentImageIndex]);\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setIsSmallScreen(window.innerWidth < 640);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div\r\n      className=\"min-h-screen flex items-center justify-center bg-cover bg-center\"\r\n      style={\r\n        isSmallScreen\r\n          ? {}\r\n          : { backgroundImage: `url(${images[currentImageIndex]})` }\r\n      }\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n};\r\n"],"names":["ResetPassword","mutate","useForgotPassword","isLoading","useIsMutating","form","Form","useForm","navigate","useNavigate","formData","setFormData","useState","email","_jsx","_Fragment","children","AuthWrapper","className","_jsxs","name","onFinish","values","onSuccess","resetFields","variant","layout","Link","to","src","nirsal","alt","Item","label","rules","required","message","Input","onChange","e","value","target","style","backgroundColor","marginTop","Button","onClick","async","preventDefault","validateFields","error","handleValidation","submit","type","htmlType","background","color","loading","_ref","currentImageIndex","setCurrentImageIndex","images","bg1","bg2","bg3","isSmallScreen","setIsSmallScreen","window","innerWidth","useEffect","intervalId","setInterval","length","clearInterval","handleResize","addEventListener","removeEventListener","backgroundImage","concat"],"sourceRoot":""}